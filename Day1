


 4 6 2

WINDOWS
10.50.32.44
LINUX
10.50.22.124

cybbh python for handbooks
SSH to linux device and run terminator for fancy terminal

"syntax enable    enable color coding
set tabstop=4      set starting tab to 4 spaces
set shiftwidth=4    sets indents to 4 spaces
set expandtab      converts tabs to spaces
set number          show line numbers
filetype indent on    will auto indent for the type of file ".py"
set autoindent"      auto indents code blocks



DAY 2
Python starts counting at 0 (0 index notation)
    a tuple cant be edited
        tuple(example) == ['h', 'e', 'a', 't']
        letters[0] = 'b'
        no no no

    lists can be changed
        list(example) == ('h', 'e', 'a', 't')
        letters[0] = 'b'
        ('b', 'e', 'a', 't')


    adding on to list
        hello.append('hola')
        adds hola to list


    formating
        '{} how are you'.format(hello[0])
        'hola how are you'
    can use multiple brackets to take multiple items from list
        '{} have you met {}'.format(name[0], name[1])


    split example 
        email = 'someguy@gmail.com'
        email = email.replace('@','.')
        email = email.split('.')
        print(email)
        OR
        email = 'someguy@gmail.com'
        email2 = email.split('@')
        email3 = '.'.join(email2)
        print(email3.split('.'))

    if example
        #!/usr/bin/env python3
        print('Hello enter a number: ')
        x = float(input())
        if x % 3 != 0 and x % 5 != 0:
            print(x)
        elif x % 3 == 0 and x % 5 == 0:
            print('fizzbuzz')
        elif x % 3 == 0:
            print('rizz')
        elif x % 5 == 0:
            print('buzz')
        else:
            print('so wrong bro, how are you so wrong')
        .upper makes all characters upper case
        .lower makes all characters lower case


    break will end loop
    continue will go to top of loop
    return returns something, like an error code
    pass goes to next instruction

    def is used to define a function

    DAY 3
        def guess_number(guess):
            x = 1
            while x == 1:
                print('Guess a Number')
                guess = int(input())
                if guess == 68:
                    print('Good job G')
                    x = 2
                    break
                elif guess > 68:
                    print ('Too high')
                    continue
                elif guess < 68:
                    print ('Too Low')
                    continue
                else:
                    print('Enter a number')
        Range 
        list(range(10)) - [1,2,3,4,5,6,7,8,9]
            (range(5,10) - 5,6,7,8,9
            (range(5,10) - 9,8,7,6,5

        getting average 
            def average(nums):
                print(sum(nums)/len(nums))    sum adds together, len is how many numbers
        slicing
            nums[start:stop:increment]
        
        dictionary {}
            romanNum = {'I':1, 'V':10, 'X':10, 'L':50}
        how to create/write files
            with open("test.txt", 'w') as fp:
                pass
                fp.write('first line\n') 
        args and quargs(geeks for geeks) ignore the star-tuple, 2 stars dictionary 

        PRACTICE TEST
TLO: 112-SCRPY002, LSA 3,4
Given the floatstr, which is a comma separated string of
floats, return a list with each of the floats in the
argument as elements in the list.

        lst = []
        for i in floatstr.split():
        lst.append(float(i))
        return lst

TLO: 112-SCRPY006, LSA 3
TLO: 112-SCRPY007, LSA 4
Given the variable length argument list, return the average
of all the arguments as a float
    print (args) and the type

        total = 0
        for i in args:
            total += i
        return total/len(args)
        OR
        return sum(args)/len(args)


 TLO: 112-SCRPY004, LSA 3
 Given a list (lst) and a number of items (n), return a new 
 list containing the last n entries in lst.


         w = -(n)
         wow = lst[w::]
         return(wow)


TLO: 112-SCRPY004, LSA 1,2
TLO: 112-SCRPY006, LSA 3
Given an input string, return a list containing the ordinal numbers of 
each character in the string in the order found in the input string. 


        lst = []
        for i in string:
            lst.append(ord(i))
        return lst

TLO: 112-SCRPY002, LSA 1,3
TLO: 112-SCRPY004, LSA 2
Given an input string, return a tuple with each element in the tuple
containing a single word from the input string in order.isty = floatstr.split()


        step = strng.split()
        step = tuple(step)
        return(step)

TLO: 112-SCRPY007, LSA 2
Given a dictionary (catalog) whose keys are product names and values are product
prices per unit and a list of tuples (order) of product names and quantities,
compute and return the total value of the order.


        total = 0
        for i in order:
            total += catalog[i[0]] * i[1]
        return total


Given a filename, open the file and return the length of the first line 
in the file excluding the line terminator.


        with open(filename) as fp:
            return len(fp.readline()) -1











