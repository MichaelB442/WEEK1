xfreerdp /u:student /v:10.50.32.44 -dynamic-resolution +glyph-cache +clipboard

links 
  when to quote in powershell simple-talk
  microsoft about_hash_tables(microsoft powershell website)
  tutorialspoint.com/powershell/powershell_brackets.htm



verb-noun
jagged arrays exist -- might need to read abt

[math]::sqrt(#) -- square root
[math]::pow(6,2) -- power (6 to the power of 2 is 36)
$matches
$input

get-command -verb get -- shows get commands
get-command -noun process -- shows commands with process
get-proccess -- shows prcesses
get-help verb-noun (-examples) -- gets help for specified command (example shows an example within help page)
                    -full -- shows full help page
  get-help *log* -- shows logs of commands
  get-help *event*
  get-help get-process *online* -- pulls up webpage of command
  get-childitem -path c:\windows -filter *.exe -recurse -name --  looks for executables
  get-alias -definition get-childitem -- looks for alias associated with get-childitem
  set-alias edit notepad.exe -- typing edit will open notepad
  remove-item alias:edit -- removes the edit alias
  (get-process).processname --  shows process list by names
  get-process notepad -- shows only the notepad process
  (get-process notepad).kill() -- kills notepad process
  get-process | get-member -- members of get process
  get-process | get-member -membertype properties -- properties of get-process

shows running services
  get-service | where-object {$_.status -eq "running"}
  shows stopped service
  return get-service | where-object -property status -eq 'stopped'

function fruit-host {
  write-host "Apple"
  write-host "Orange"
  write-host "Banana"
  write-host "Pear"
  }

function fruit-output {
  write-output "Apple"
  write-output "Orange"
  write-output "Banana"
  write-output "Pear"
  }

fruit-host | sort -- will not sort with -host
fruit-output | sort -- will sort with -output -- sends data down the line 

both of these print 10
  $x = 10
  get-variable x
  get-childitem variable:x

declare multiple variables
  $x, $y, $z = "1", "2", "3"

see if it exists
  test-path variable:x 

remove variables
  remove-variable x
  del variable:x

single quotes -- are literal
double quotes -- allows variables within string

reverse array
  $revarray = -3..15
  $reverse = $revarray[($revarray.length-1)..0]
  $reverse

  $revarray = -3..15
  [array]::reverse($revarray)

Hash tables
  $employee1 = [ordered]@{}
  $employee2 = [ordered]@{}
  
  $employee1.first = "Mary"
  $employee1["last"] = "Hopper"
  $employee1.ID = "001"
  $employee1["job"] = "Software Developer"

  $employee1

  $employee2.first = "John"
  $employee2["last"] = "Williams"
  $employee2.ID = "002"
  $employee2["job"] = "Web Developer"

  $employee2
  $employee1.Username = "mhopper001"
  $employee2.Username = "jwilliams002"
  
  $employee3 = [ordered]@{}
  $employee3.first = "bob"
  $employee3.last = "marley"
  $employee3.id = "20"
  $employee3.username = "bmarley24"
  $employee3.job = "accountant"

idk wat this is

foreach ($grp in (Get-LocalGroup).name){
    write-host "`n$grp" -ForegroundColor magenta -BackgroundColor black
    '========================================='
    (Get-LocalGroupMember -Name $grp).name -replace("$env:computername\\",'')
}

  DAY 2
command substitution ((script blocks))
  $myblock = {get-service | format-table name, status}

  & $myblock

      sorting and grouping
this takes the directory and sorts by the size of the file
  get-childitem | Sort-Object -property length -Descending -- (| group-object -extension) - extra part groups like items together

  get-service | group-object status

  get-childitem | group-object {$_.length -lt 1kb}

equivelant of head
  get-process | select-object -last 10

prints just the names
  get-process | select-object  -expandproperty name

find items with names that contain microsoft
  get-process | where-object {$_.company -like 'micro*'} | format-table name, description, company
                                .####### can  be any of the areas (name, company, description, etc.)
                                         -like -----case insensitive
                                         -clike ----case sensitive
                                         -match ----regex('^m.*$')

not powershell related
  get-process | where-object {$_.company -notlike 'power*'} | format-table name, description, company

  get-process | where-object processname -ne "Idle" | sort-object starttime | select-object -last 10 | format-table processname, starttime

  1,2,3,4,4,4,4,2,2,2,3,3,1,1,5 | sort-object | get-unique ==== 1 2 3 4 5
  (1,2,3,4,5 | measure-object -average).average --- prints just the average
  ((1,2,3,4,5 | measure-object -average).average).gettype()


  ----

  ----

  $mytruck = new-object object
  add-member -membertype noteproperty -name color -value white -inputobject $mytruck --
  add-member -me noteproperty -in $mytruck -na make -value dodge     --
  add-member -inputobject $mytruck noteproperty model "Ram" --
  $mytruck | add-member noteproperty Cab doublecab                -- these lines all do the same thing, just differnt ways to set properties
  
  add-member -membertype ScriptMethod -inputobject $mytruck -name drive -value {"Going on a roadtrip."} -- adding script objects(methods)
  add-member -inputobject $mytruck scriptmethod Accelerate {"Skinny pedal on the right."}
  $mytruck | add-member scriptmethod Park {"Finding a spot is impossible."}

      First if else
              $x = 9
              if ($x -gt 10){"$x is greater than 10"}
              else {"$x is less than 10"}

      Second if else
              $x = 2
              if ($x -eq 5) {
              write-host "Bob"
              }
              elseif ($x -eq 4) {
              write-host "Sue"
              }
              elseif ($x -eq 3) {
              write-host "Jon"
              }
              elseif ($x -eq 2) {
              write-host "Tom"
              }
              elseif ($x -gt 5) {
              write-host "Mary"
              }
              elseif ($x -eq 1) {
              write-host "Vectorrrr"
              }
              else {
              write-host "Who"
              }
              elseif ($x -gt 5) {
              write-host "Mary"
              }
              else {
              write-host "Who"
              }

      FOREACH loops
foreach-object is used in pipes
foreach goes slower and isnt used in pipes
              $nums =1,2,3,4,5
              $nums | foreach-object{$_ * 2}
            -----------------------
              $list = 'a', 'b', 'c', 'd', 'e'
              $list | foreach-object {$_.toupper()} makes them uppercase
            -----------------------
              $array = 1,2,3,4,5,6,7
              $sum = 0
              $array | foreach-object {$sum += $_}
              $sum
            -----------------------
              get-process| select-object -first 10 | foreach-object {$_.name} | foreach-object {$_.toupper()}
            -----------------------
              foreach ($item in gci C:\ -recurse){$item.name} -- this breaks
            -----------------------
              $teams = "bop", "band kid", "boomers", "redbull", "raiders"
              foreach($teams in $teams){"whatever $teams"}

      WHILE loop
              $var = ""
              while ($var -ne "MUHROONS"){
                  $var = read-host "wat is crayn eatin brach"
              }
            -----------------------
              $num = 0
              do {
              write-host "$num BEERS"
              $num++
              }while ($num -le 10000000)
            -----------------------
              for($num =1; $num -le 3; $num++){$num}\
            -----------------------
              for $i =0; -le 255; $i++) {
                write-host 192.168.0.$i
              }
            -----------------------
              $num = 0 
              while($num -lt 10){
                  $num += 1
                  if($num -eq 2) {
                    continue
                  }
                  $num
              }
            ------------------------
adds content to file
              set-content -path .\example.txt -value "a string"
              get-content .\example,txt
              add-content .\example.txt -value "anotha one"

                                    FUNCTIONS
            ________________________________________________________________________
              ####"elements provided on the pipeline"
              function print-PSitem{
                begin{} --optional
                Process{foreach($i in $PSitem){$i}}
                end{} --optional
              }
              ## running this command 1,2,3,4,5,6 | print-PSitem
            _________________________________________________________________________
              function Print-Item{
                Process {foreach($i in $input){$i}}
              }
            _________________________________________________________________________
              function Get-Sum{
                Begin{$sum = 0}
                Process{$sum += $_; $_}  (; $_) prints each number
                End{$sum} -prints final
              }
            __________________________________________________________________________
















                                                                              IDK IF THIS WORKS
                                                                              __________________________________________
                                                                              $x = '.\notepad', 'msedge', '.\mspaint'
                                                                              $x | foreach-object{start $_}
                                                                              $file = ".\procs1.txt"
                                                                              foreach($x in $x){
                                                                              get-process | where-object{$_.name -like $x} | 
                                                                              foreach-object{add-content $file $_.id} }
                                                                              stop-process -name msedge, mspaint, notepad
                                                                              ___________________________________________

























