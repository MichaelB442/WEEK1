linux handbook 
phoenixap.com//kb/bash-printf -- printf
baeldung.com/linux/bash-single-vs-double-brackets
10.50.26.116
regex101

touch to make a file
touch -t alter the time 
chmod 777
ls -1 shows just the names of all the files
  Command (find / -option)
find -name hi.txt)) finds file by name
find -iname ))) finds file by name regardless of capitalization 
find -inum ))) finds file based off of inode number
find -size ))) finds files based on size
find -gid ))) finds files based on group id
find -uid ))) finds files based on used id
find -maxdepth ))) defines maximum directories deep to go
find -type d ))) directories) -f -- files) -p -- name pipes
find -name \*.txt
find -atime 3) anything accessed in the last three days
find -ctime 3) changed in last three days
find -mtime 3) modified last three days
find -amin 180) accessed last three hours
  each ()time has a min equivelant ()time is days ()min is minutes
  sudo !! runs previously used command as root
find -exec -- use linux handbook to understand further
  \; for each result the command is executed
  + will execute once
find -perm /4000 -uid 0 -ls 2>/dev/null
  2>/dev/null get rid of the things that dont fit the search
  -printf is like .format(choose for example to only show the name)
find -perm /4000 -uid 0 -ls 2>/dev/null -printf "%i %f\n"
  %i is the inode and %f is the file \n is new line
find -empty) looks for any files or directories that are empty

  Command (grep)
grep -E//egrep is extended grep 
grep -i case insensitive
grep -n shows lines
grep -v inverts search
  cat fake1passwd.txt | grep /bin/bash
accounts with that directory
  egrep "student|root|bob" fake1passwd.txt
shows those accounts, bob doesnt exist
  cat  fake1passwd.txt | grep -v /bin/bash
shows everything without bin/bash

kill) kills by PID
pkill)kills by name

cat fake1passwd.txt | cut -d: -f1 -s
                      cut -d(delimeter) : (colon is delemiter) -f1(field one is being cut)
                              -f1- will print everything after cut
                                  -s(strict will not print anything in the cut)

Command(awk)

awk -F: '{print $1}'  -- print first field  
awk -F: '{print $NF}'  --  last field of everyline
awk -F: '{$3 == 0} {print $1}' if field 3 is equal to 0 print field 1
awk -F: 'BEGIN {OFS = "@"} {print $1, $3}' output field seperator is @ print fields 1 and 3
awk -F: '($3 >= 150){print $0}' if field 3 greater than or equal to 150 print (whole line?)
awk -F: '($7 == "/bin/bash"){print $1, $6, $3}' if field seven has this string print these fields


Command (sort)

****pipe another command into sort. sort is dumb and needs another command giving it input****
sort) ascii order
sort -r) is reversed
sort -n) sorts numericallly
sort -nr) reverse numeric
sort -t) tells sort the file is formatted wih columns
sort -t : -k 1,4) sort by columns 1 and 4
sort -t : -k 1,4 | uniq) sorts for inuque could also just use -u instead of pipe into uniq 
                   uniq -c counts how many of each string is repeated


Command(sed)

            chicken->hamburger
sed -e 's/chicken/hamburger/g' -e 's/pepperoni/sausage/' pizza.txt )) peperoni only changes the first instance because it doesnt have g
        start               globally      peperoni-> sausage
sed -e '/chicken/d' pizza.txt )) deletes every line with chicken(entire line)

tar -czf compresses information

#!/bin/bash
contents = (cat simple.txt)
if [[$contents == "tacos" ]]; then
    echo "are good on tuesdays"
elif [[ $contents == "costco is amazing" ]]; then
    echo "and will save you money"
elif [[ $contents == "chicken bake" ]]; then
    echo "tasty but will make you fail height and weight"
else
    echo "no tax at commisary"
fi



command substitution
nano to make a script. use #! line and enter code you want easy access to.

Making an alias
alias (name) = command





& and(background)
&& logical and
|| logical or
| break
! not
"" look at first
> create/overrite
>> create/append



        EXAMPLES
FIND files with .txt but no ~
  find $HOME/1123/ -name *.txt ! -name *~* -exec cp {} $HOME/CUT
  find $HOME/1123 -name *.txt | grep -v "~"

finding with INODE, remove unwanted
  find / -inum 4026532575 -printf "%f\n" 2>/dev/null

using ls -l and CUT to show .txt files, no directories
  ls -l $HOME/CUT | cut -d: -f2 -s | cut -d" " -f2 -s | cut -d. -f1,2 -s > $HOME/CUT/names

searching for hidden IPs sorting them in descending ORDER of most occurences
  grep -P -o '(\d{1,3}\.){3}(\d{1,3})' StoryHiddenIPs | sort | uniq -c | sort -nr

using only AWK to get a list of users and system accounts not including UIDs 0-3
  awk -F: '(($7 == "/bin/bash") && ($3 >= 4)) {print $1}' $HOME/passwd > $HOME/SED/names.txt

search dmesg for CPU or BIOS but not usable or reserved, not printing message code
  dmesg | grep -P "CPU|BIOS" | grep -P -i -v "usable|reserved" | cut -d] -f2-

using openssl to salt a password, replacing passwords with it
  #!/bin/bash
  a=$(openssl passwd -1 -salt bad4u Password1234)
  awk -F: -v "yurt=$a" 'BEGIN {OFS = ":"} {$2=yurt} {print}' $HOME/PASS/shadow.txt

using SED to write lines not containing specific directories to another file
  sed -e '/\/bin\/sh/d' -e '/\/bin\/false/d' $HOME/passwd > $HOME/PASS/passwd.txt

find files with .bin print PATH
  find $HOME/ -name \*.bin -printf "%h\n" | awk -F/ '{print $0}' | sort -u

find files in directories sort them and get md5 of the 10th file
  mann=$(find /bin /sbin /usr/sbin /usr/bin -executable -type f | sort | head | tail -1)
  md5sum $mann | cut -d' ' -f1

sorting passwd by GID grabbing 10th and using md5 on their directory
  a=$(cat /etc/passwd | cut -d: -f4- | sort -n | head | tail -1 | awk -F: '{print $3}')
  echo $a | md5sum | cut -d' ' -f1

if using tar, use -czf


